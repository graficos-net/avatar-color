{"version":3,"file":"avatar-color.min.js","sources":["../../src/index.js"],"sourcesContent":["// @ts-check\n\nconst available16Chars = 'abcdef1234567890';\n\n/**\n * @param {number} number\n */\nfunction getNumberIn360Cycles(number) {\n  if (number > 360) {\n    return getNumberIn360Cycles(Math.ceil(((number / 360) * 20) + 16))\n  }\n  return number;\n}\n\nconst getHexChar = /**\n * @param {string} string\n */\n string => {\n  const parsed = parseInt(`0x${string}`, 16)\n  // console.log('parsed', parsed)\n  return parsed\n}\n\n/**\n * @param {string} string\n */\nfunction getNumerIn360RangeFromString(string) {\n  const sample = string.length > 16 ? string.substring(0, 16): string;\n  // console.log({sample})\n  const arrayOfNumbers = [...sample]\n    .filter(char => char !== ' ' || !char)\n    .map(getHexChar)\n    .reduce((acc, currentNumber, i) => ([\n      ...acc,\n      isNaN(currentNumber) ?\n        getHexChar(available16Chars[i]) :\n          currentNumber,\n    ]), [])\n  const total = arrayOfNumbers.reduce((a, b) => a + (b * 10), 0)\n  // console.log({arrayOfNumbers, total})\n  return getNumberIn360Cycles(total)\n}\n\n/**\n * @param {string} string\n */\nfunction getCharHex(string) {\n  if (!string || !string.length || typeof string !== 'string') {\n    return '0'\n  }\n  try {\n    return '' + getNumerIn360RangeFromString(string);\n  } catch (error) {\n    console.log({error});\n  }\n}\n\n/**\n * Returns HSL/HSLA format color as a astring\n * @param {string} entryString\n * @param {number} [saturation=45]\n * @param {number} [light=50]\n * @param {number} [alpha=1]\n */\nexport default function gGetAvatarColor(entryString, saturation = 45, light = 50, alpha = 1) {\n  let color = `hsl${ alpha !== 1 ? 'a' : '' }(`;\n  entryString = ('' + entryString) || ' ';\n  color += getCharHex(entryString);\n  color += `, ${saturation}%, ${light}%${alpha !== 1 ? ', ' + alpha : ''})`;\n  return color;\n}\n"],"names":["available16Chars","getNumberIn360Cycles","number","Math","ceil","getHexChar","string","parseInt","getNumerIn360RangeFromString","length","substring","filter","char","map","reduce","acc","currentNumber","i","isNaN","a","b","getCharHex","error","console","log","gGetAvatarColor","entryString","saturation","light","alpha","color"],"mappings":"aAEA,MAAMA,iBAAmB,mBAKzB,SAASC,qBAAqBC,GAC5B,OAAIA,EAAS,IACJD,qBAAqBE,KAAKC,KAAOF,EAAS,IAAO,GAAM,KAEzDA,EAGT,MAAMG,WAGLC,IAGC,OAFeC,cAAcD,IAAU,KAQzC,SAASE,6BAA6BF,GAcpC,OAAOL,qBAXgB,IAFRK,EAAOG,OAAS,GAAKH,EAAOI,UAAU,EAAG,IAAKJ,GAG1DK,OAAOC,GAAiB,MAATA,IAAiBA,GAChCC,IAAIR,YACJS,OAAO,CAACC,EAAKC,EAAeC,QACxBF,EACHG,MAAMF,GACJX,WAAWL,iBAAiBiB,IAC1BD,GACF,IACuBF,OAAO,CAACK,EAAGC,IAAMD,EAAS,GAAJC,EAAS,IAQ9D,SAASC,WAAWf,GAClB,IAAKA,IAAWA,EAAOG,QAA4B,iBAAXH,EACtC,MAAO,IAET,IACE,MAAO,GAAKE,6BAA6BF,GACzC,MAAOgB,GACPC,QAAQC,IAAI,CAACF,MAAAA,KAWF,SAASG,gBAAgBC,EAAaC,EAAa,GAAIC,EAAQ,GAAIC,EAAQ,GACxF,IAAIC,QAAyB,IAAVD,EAAc,IAAM,MAIvC,OAFAC,GAAST,WADTK,EAAe,GAAKA,GAAgB,KAEpCI,QAAcH,OAAgBC,KAAmB,IAAVC,EAAc,KAAOA,EAAQ"}